statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement   : KEYWORD:RETURN expr?
            : KEYWORD:CONTINUE
            : KEYWORD:BREAK
            : expr


expr  : KEYWORD:VAR IDENTIFIER EQUALS expression
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr   : NOT comp-expr
            : arith-expr ((EQUALS_EQUALS|LESS_THAN|GREATER_THAN|LESS_THAN_EQUALS|GREATER_THAN_EQUALS|) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MULTIPLY|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POWER_OF factor)*

call        : atom (LBRACKET (expr (COMMA expr)*)? RBRACKET)?

atom        : INT|FLOAT|STRING|IDENTIFIER
            : LBRACKET expression RBRACKET
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:IF expr KEYWORD:THEN
              (statement if-expr-elif|if-expr-else?)
            | (NEWLINE statements KEYWORD:END|if-expr-elif|if-expr-else


if-expr-elif: KEYWORD:ELIF expr KEYWORD:THEN
              (statement if-expr-elif|if-expr-else?)
            | (NEWLINE statements KEYWORD:END|if-expr-elif|if-expr-else

if-expr-else: KEYWORD:ELSE
              statement
            | (NEWLINE statements KEYWORD:END)


for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
              (KEYWORD:STEP expr)? KEYWORD:THEN
              statement
            | (NEWLINE statements KEYWORD:END)

while-expr  : KEYWORD:WHILE expr KEYWORD:THEN
              statement
            | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUN IDENTIFIER?
              LBRACKET (IDENTIFIER (COMMA IDENTIFIER)*)? RBRACKET
             (ARROW expr)
            | (NEWLINE statements KEYWORD:END)


