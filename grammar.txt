expression  : KEYWORD:VAR IDENTIFIER EQUALS expression
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr   : NOT comp-expr
            : arith-expr ((EQUALS_EQUALS|LESS_THAN|GREATER_THAN|LESS_THAN_EQUALS|GREATER_THAN_EQUALS|) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MULTIPLY|DIV) factor)*

factor      : (PLUS|MINUS) factor
            :power

power       : call (POWER_OF factor)*

call        : atom (LBRACKET (expr (COMMA expr)*)? RBRACKET)?

atom        : INT|FLOAT|STRING|IDENTIFIER
            : LBRACKET expression RBRACKET
            : if-expr
            : for-expr
            : while-expr
            : func-def


if-expr     : KEYWORD:IF expr KEYWORD:THEN expr
              (KEYWORD:ELIF expr KEYWORD:THEN expr)*
              (KEYWORD:ELSE expr)?

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
              (KEYWORD:STEP expr)? KEYWORD:THEN expr

while-expr  : KEYWORD:WHILE expr KEYWORD:THEN expr

func-def    : KEYWORD:FUN IDENTIFIER?
            : LBRACKET (IDENTIFIER (COMMA IDENTIFIER)*)? RBRACKET
            : ARROW EXPR


